/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫: node backend/scripts/checkImages.js
 */

require("dotenv").config();
const mongoose = require("mongoose");
const fs = require("fs");
const path = require("path");
const Offer = require("../models/Offer");

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
mongoose
  .connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log("‚úÖ Connected to MongoDB");
    checkImages();
  })
  .catch((err) => {
    console.error("‚ùå Error connecting to MongoDB:", err);
    process.exit(1);
  });

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
 */
async function checkImages() {
  try {
    console.log("üîç Checking images in database...");

    // –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    const imagesDir = path.join(__dirname, "..", "uploads", "images");
    console.log(`üìÅ Images directory: ${imagesDir}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (!fs.existsSync(imagesDir)) {
      console.error(`‚ùå Images directory does not exist: ${imagesDir}`);
      process.exit(1);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const existingFiles = new Set(fs.readdirSync(imagesDir));
    console.log(`üìä Found ${existingFiles.size} files in images directory`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    const offers = await Offer.find({
      $or: [
        { image: { $exists: true, $ne: null, $ne: "" } },
        { images: { $exists: true, $ne: null, $not: { $size: 0 } } },
      ],
    });

    console.log(`üìä Found ${offers.length} offers with images in database`);

    let fixedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    for (const offer of offers) {
      try {
        let changed = false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ image
        if (offer.image) {
          const imageName = offer.image.split("/").pop();
          if (!existingFiles.has(imageName)) {
            console.log(
              `‚ö†Ô∏è Image file not found for offer ${offer._id}: ${imageName}`
            );
            offer.image = null;
            changed = true;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ images
        if (Array.isArray(offer.images) && offer.images.length > 0) {
          const validImages = [];

          for (const imagePath of offer.images) {
            const imageName = imagePath.split("/").pop();
            if (existingFiles.has(imageName)) {
              validImages.push(imageName);
            } else {
              console.log(
                `‚ö†Ô∏è Image file not found in images array for offer ${offer._id}: ${imageName}`
              );
              changed = true;
            }
          }

          if (validImages.length !== offer.images.length) {
            offer.images = validImages;
            changed = true;
          }
        }

        // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ images –ø—É—Å—Ç, –Ω–æ –µ—Å—Ç—å image, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤
        if ((!offer.images || offer.images.length === 0) && offer.image) {
          offer.images = [offer.image.split("/").pop()];
          changed = true;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (changed) {
          await offer.save();
          console.log(`‚úÖ Fixed offer ${offer._id}`);
          fixedCount++;
        } else {
          skippedCount++;
        }
      } catch (err) {
        console.error(`‚ùå Error checking offer ${offer._id}:`, err);
        errorCount++;
      }
    }

    console.log("\nüìù Check summary:");
    console.log(`‚úÖ Fixed: ${fixedCount} offers`);
    console.log(`‚è≠Ô∏è Skipped: ${skippedCount} offers`);
    console.log(`‚ùå Errors: ${errorCount} offers`);

    console.log("\nüéâ Check completed!");
    process.exit(0);
  } catch (err) {
    console.error("‚ùå Error during check:", err);
    process.exit(1);
  }
}
