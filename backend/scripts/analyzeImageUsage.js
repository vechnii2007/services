/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π image –∏ images –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Offers
 * –ó–∞–ø—É—Å–∫: node backend/scripts/analyzeImageUsage.js
 */

require("dotenv").config();
const mongoose = require("mongoose");
const Offer = require("../models/Offer");

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
mongoose
  .connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log("‚úÖ Connected to MongoDB");
    analyzeImageUsage();
  })
  .catch((err) => {
    console.error("‚ùå Error connecting to MongoDB:", err);
    process.exit(1);
  });

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π image –∏ images –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Offers
 */
async function analyzeImageUsage() {
  try {
    console.log("üîç Analyzing image usage in offers...\n");

    const totalOffers = await Offer.countDocuments();

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–µ–º image
    const offersWithImage = await Offer.countDocuments({
      image: { $exists: true, $ne: null, $ne: "" },
    });

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –º–∞—Å—Å–∏–≤–æ–º images
    const offersWithImages = await Offer.countDocuments({
      images: { $exists: true, $ne: null, $not: { $size: 0 } },
    });

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –æ–±–æ–∏–º–∏ –ø–æ–ª—è–º–∏
    const offersWithBoth = await Offer.countDocuments({
      image: { $exists: true, $ne: null, $ne: "" },
      images: { $exists: true, $ne: null, $not: { $size: 0 } },
    });

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const offersWithoutImages = await Offer.countDocuments({
      $or: [{ image: { $exists: false } }, { image: null }, { image: "" }],
      $or: [
        { images: { $exists: false } },
        { images: null },
        { images: { $size: 0 } },
      ],
    });

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≥–¥–µ image –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º images
    const offersWithMismatch = await Offer.countDocuments({
      image: { $exists: true, $ne: null, $ne: "" },
      images: { $exists: true, $ne: null, $not: { $size: 0 } },
      $expr: { $ne: ["$image", { $arrayElemAt: ["$images", 0] }] },
    });

    // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log("üìä Image Usage Statistics:");
    console.log(`Total offers: ${totalOffers}`);
    console.log(
      `Offers with 'image' field: ${offersWithImage} (${(
        (offersWithImage / totalOffers) *
        100
      ).toFixed(2)}%)`
    );
    console.log(
      `Offers with 'images' array: ${offersWithImages} (${(
        (offersWithImages / totalOffers) *
        100
      ).toFixed(2)}%)`
    );
    console.log(
      `Offers with both fields: ${offersWithBoth} (${(
        (offersWithBoth / totalOffers) *
        100
      ).toFixed(2)}%)`
    );
    console.log(
      `Offers without any images: ${offersWithoutImages} (${(
        (offersWithoutImages / totalOffers) *
        100
      ).toFixed(2)}%)`
    );
    console.log(
      `Offers with mismatch between image and images[0]: ${offersWithMismatch} (${(
        (offersWithMismatch / totalOffers) *
        100
      ).toFixed(2)}%)`
    );

    // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤ images
    const imagesLengthStats = await Offer.aggregate([
      { $match: { images: { $exists: true, $ne: null, $not: { $size: 0 } } } },
      { $project: { imagesLength: { $size: "$images" } } },
      {
        $group: {
          _id: "$imagesLength",
          count: { $sum: 1 },
        },
      },
      { $sort: { _id: 1 } },
    ]);

    console.log("\nüìè Images Array Length Distribution:");
    imagesLengthStats.forEach((stat) => {
      console.log(
        `Offers with ${stat._id} image(s): ${stat.count} (${(
          (stat.count / totalOffers) *
          100
        ).toFixed(2)}%)`
      );
    });

    // –í—ã–≤–æ–¥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    console.log("\nüìã Sample Offers:");

    // –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å image
    const sampleWithImage = await Offer.findOne({
      image: { $exists: true, $ne: null, $ne: "" },
      $or: [
        { images: { $exists: false } },
        { images: null },
        { images: { $size: 0 } },
      ],
    }).select("_id title image images");

    if (sampleWithImage) {
      console.log("Example offer with only image field:");
      console.log(sampleWithImage.toJSON());
    }

    // –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å images
    const sampleWithImages = await Offer.findOne({
      images: { $exists: true, $ne: null, $not: { $size: 0 } },
      $or: [{ image: { $exists: false } }, { image: null }, { image: "" }],
    }).select("_id title image images");

    if (sampleWithImages) {
      console.log("\nExample offer with only images array:");
      console.log(sampleWithImages.toJSON());
    }

    // –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –æ–±–æ–∏–º–∏ –ø–æ–ª—è–º–∏
    const sampleWithBoth = await Offer.findOne({
      image: { $exists: true, $ne: null, $ne: "" },
      images: { $exists: true, $ne: null, $not: { $size: 0 } },
    }).select("_id title image images");

    if (sampleWithBoth) {
      console.log("\nExample offer with both fields:");
      console.log(sampleWithBoth.toJSON());
    }

    console.log("\nüéâ Analysis completed!");
    process.exit(0);
  } catch (err) {
    console.error("‚ùå Error during analysis:", err);
    process.exit(1);
  }
}
