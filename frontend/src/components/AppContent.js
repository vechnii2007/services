import React, { useContext, useState, useEffect } from "react";
import {
  Routes,
  Route,
  useLocation,
  useNavigate,
  matchPath,
} from "react-router-dom";
import { Box, Typography } from "@mui/material";
import { useTranslation } from "react-i18next";
import Header from "./Header/index";
import SideMenu from "./SideMenu";
import RouteGuard from "../utils/RouteGuard";
import { routesConfig } from "../utils/routesConfig";
import { AuthContext } from "../context/AuthContext";
import { useChatModal } from "../context/ChatModalContext";
import toast, { Toaster } from "react-hot-toast";
import useSocket from "../hooks/useSocket";
import useNotification from "../composables/useNotification";

const AppContent = () => {
  const { t } = useTranslation();
  const location = useLocation();
  const { user, loading } = useContext(AuthContext);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const {
    openChat,
    closeChat,
    isOpen,
    requestId: modalRequestId,
  } = useChatModal();
  const navigate = useNavigate();
  const { socket } = useSocket();
  const { addNotification } = useNotification();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥–µ
  const isLandingPage = location.pathname === "/";

  const toggleDrawer = (open) => () => {
    setDrawerOpen(open);
  };
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –ø—É—Ç—å —Å /chat/:requestId
    const match = matchPath("/chat/:requestId", location.pathname);
    if (match && match.params && match.params.requestId) {
      // –ï—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å —ç—Ç–∏–º requestId, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      if (!isOpen || modalRequestId !== match.params.requestId) {
        openChat(match.params.requestId);
      }
    }
    // –ï—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ /chat/:requestId, –Ω–æ –º–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
    if (!match && isOpen) {
      closeChat();
    }
    // eslint-disable-next-line
  }, [location.pathname]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ /chat-list
  useEffect(() => {
    if (!isOpen && matchPath("/chat/:requestId", location.pathname)) {
      navigate("/chat-list", { replace: true });
    }
    // eslint-disable-next-line
  }, [isOpen, location.pathname]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Å–æ–∫–µ—Ç—É
  useEffect(() => {
    if (!socket) return;
    const handleNotification = (notification) => {
      toast(notification.message || t("–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"), { icon: "üîî" });
      if (addNotification) {
        addNotification(notification);
      }
    };
    socket.on("notification", handleNotification);
    return () => {
      socket.off("notification", handleNotification);
    };
  }, [socket, t, addNotification]);

  if (loading) {
    return (
      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          height: "100vh",
        }}
      >
        <Typography>{t("loading")}</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}>
      {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ö–µ–¥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥–µ */}
      {!isLandingPage && <Header onDrawerToggle={toggleDrawer(true)} />}

      <Box sx={{ display: "flex", flex: 1 }}>
        {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–∞–π–¥–±–∞—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥–µ */}
        {!isLandingPage && (
          <SideMenu
            open={drawerOpen}
            onClose={toggleDrawer(false)}
            user={user}
          />
        )}

        <Box
          component="main"
          sx={{
            flexGrow: 1,
            p: isLandingPage ? 0 : 3, // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞
            mt: isLandingPage ? 0 : { xs: 8, sm: 9 }, // –£–≤–µ–ª–∏—á–µ–Ω –æ—Ç—Å—Ç—É–ø –æ—Ç —Ö–µ–¥–µ—Ä–∞
            width: "100%",
            maxWidth: "100%",
            overflowX: "hidden",
          }}
        >
          <Toaster />
          <Routes>
            {routesConfig.map(({ path, element, requiredRole }) => (
              <Route
                key={path}
                path={path}
                element={
                  requiredRole ? (
                    <RouteGuard user={user} requiredRole={requiredRole}>
                      {element}
                    </RouteGuard>
                  ) : (
                    element
                  )
                }
              />
            ))}
          </Routes>
        </Box>
      </Box>
    </Box>
  );
};

export default AppContent;
