import React, {
  useContext,
  useState,
  useEffect,
  useCallback,
  useMemo,
  memo,
} from "react";
import {
  Routes,
  Route,
  useLocation,
  useNavigate,
  matchPath,
} from "react-router-dom";
import { Box, Typography } from "@mui/material";
import { useTranslation } from "react-i18next";
import Header from "./Header/index";
import SideMenu from "./SideMenu";
import RouteGuard from "../utils/RouteGuard";
import { routesConfig } from "../utils/routesConfig";
import { AuthContext } from "../context/AuthContext";
import { useChatModal } from "../context/ChatModalContext";
import toast, { Toaster } from "react-hot-toast";
import { SocketContext } from "../context/SocketContext";
import useNotification from "../composables/useNotification";

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
const MemoHeader = memo(Header);
const MemoSideMenu = memo(SideMenu);
const MemoToaster = memo(Toaster);

// –ò–∑–±–µ–≥–∞–µ–º —á–∞—Å—Ç—ã—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤ –∑–∞ —Å—á–µ—Ç –º–µ–º–æ–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const AppContent = () => {
  const { t } = useTranslation();
  const location = useLocation();
  const { user, loading } = useContext(AuthContext);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const {
    openChat,
    closeChat,
    isOpen,
    requestId: modalRequestId,
  } = useChatModal();
  const navigate = useNavigate();
  const { socket } = useContext(SocketContext);
  const { addNotification } = useNotification();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useRef –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ–∑ –≤—ã–∑–æ–≤–∞ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const mountInfoRef = React.useRef({
    mounted: false,
    mountTime: new Date().toISOString(),
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥–µ - –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const isLandingPage = useMemo(
    () => location.pathname === "/",
    [location.pathname]
  );

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
  const toggleDrawer = useCallback(
    (open) => () => {
      setDrawerOpen(open);
    },
    []
  );

  // –í—ã–Ω–æ—Å–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Ç–∏ –¥–ª—è —á–∞—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –ø—É—Ç—å —Å /chat/:requestId
    const match = matchPath("/chat/:requestId", location.pathname);
    if (match && match.params && match.params.requestId) {
      // –ï—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å —ç—Ç–∏–º requestId, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      if (!isOpen || modalRequestId !== match.params.requestId) {
        openChat(match.params.requestId);
      }
    }
    // –ï—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ /chat/:requestId, –Ω–æ –º–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
    if (!match && isOpen) {
      closeChat();
    }
  }, [location.pathname, modalRequestId, isOpen, openChat, closeChat]);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –±–µ–∑ –≤—ã–∑–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤
  useEffect(() => {
    if (!mountInfoRef.current.mounted) {
      mountInfoRef.current.mounted = true;
    }

    return () => {
      mountInfoRef.current.mounted = false;
      mountInfoRef.current.mountTime = new Date().toISOString();
    };
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ /chat-list
  useEffect(() => {
    if (!isOpen && matchPath("/chat/:requestId", location.pathname)) {
      navigate("/chat-list", { replace: true });
    }
  }, [isOpen, location.pathname, navigate]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Å–æ–∫–µ—Ç—É
  useEffect(() => {
    if (!socket) return;

    const handleNotification = (notification) => {
      toast(notification.message || t("–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"), { icon: "üîî" });
      if (addNotification) {
        addNotification(notification);
      }
    };

    socket.on("notification", handleNotification);

    return () => {
      socket.off("notification", handleNotification);
    };
  }, [socket, t, addNotification]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const routes = useMemo(() => {
    return routesConfig.map(({ path, element, requiredRole }) => (
      <Route
        key={path}
        path={path}
        element={
          requiredRole ? (
            <RouteGuard user={user} requiredRole={requiredRole}>
              {element}
            </RouteGuard>
          ) : (
            element
          )
        }
      />
    ));
  }, [user]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const loadingState = useMemo(() => {
    if (loading) {
      return (
        <Box
          sx={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            height: "100vh",
          }}
        >
          <Typography>{t("loading")}</Typography>
        </Box>
      );
    }
    return null;
  }, [loading, t]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–ø–∫–∏ –∏ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
  const header = useMemo(() => {
    return !isLandingPage && <MemoHeader onDrawerToggle={toggleDrawer(true)} />;
  }, [isLandingPage, toggleDrawer]);

  const sideMenu = useMemo(() => {
    return (
      !isLandingPage && (
        <MemoSideMenu
          open={drawerOpen}
          onClose={toggleDrawer(false)}
          user={user}
        />
      )
    );
  }, [isLandingPage, drawerOpen, toggleDrawer, user]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const contentStyles = useMemo(
    () => ({
      flexGrow: 1,
      p: isLandingPage ? 0 : 3, // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞
      mt: isLandingPage ? 0 : { xs: 8, sm: 9 }, // –£–≤–µ–ª–∏—á–µ–Ω –æ—Ç—Å—Ç—É–ø –æ—Ç —Ö–µ–¥–µ—Ä–∞
      width: "100%",
      maxWidth: "100%",
      overflowX: "hidden",
    }),
    [isLandingPage]
  );

  if (loadingState) {
    return loadingState;
  }

  return (
    <Box sx={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}>
      {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ö–µ–¥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥–µ */}
      {header}

      <Box sx={{ display: "flex", flex: 1 }}>
        {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–∞–π–¥–±–∞—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥–µ */}
        {sideMenu}

        <Box component="main" sx={contentStyles}>
          <MemoToaster />
          <Routes>{routes}</Routes>
        </Box>
      </Box>
    </Box>
  );
};

export default memo(AppContent);
